//caution do not edit this file manually it is a template in tenjin format
`define  Buff_size 32
////////////////////////////////////////////
module top(clk,rst_n,rs232_rx, BusA,BusB,BusC, led);

///////////////////////////////////////////
input clk;	// 50MHz
input rst_n;	//reset, neg edge.
input rs232_rx;	// RS232 rec
//output rs232_tx;	//	RS232 transfer
/////////////////////////////////////////

inout [21:2] BusA;
inout [40:40] BusB;
inout [91:48] BusC;


////////////////////////////////////////
output led; // debug led

// state control						
parameter IDLE = 3'b000;
parameter S1 = 3'b001;
parameter WAIT = 3'b010;
parameter SAVE = 3'b100;

// commond reg
parameter A=8'h41 ;
parameter B=8'h42 ;
parameter C=8'h43 ;
parameter D=8'h44 ;
parameter E=8'h45 ;
parameter F=8'h46 ;
parameter G=8'h47 ;
parameter H=8'h48 ;
parameter I=8'h49 ;
parameter J=8'h4a ;
parameter K=8'h4b ;
parameter L=8'h4c ;
parameter M=8'h4d ;
parameter N=8'h4e ;
parameter O=8'h4f ;
parameter P=8'h50 ;
parameter Q=8'h51 ;
parameter R=8'h52 ;
parameter S=8'h53 ;
parameter T=8'h54 ;
parameter U=8'h55 ;
parameter V=8'h56 ;
parameter W=8'h57 ;
parameter X=8'h58 ;
parameter Y=8'h59 ;
parameter Z=8'h5a ;
parameter Z0=8'h30 ;
parameter I1=8'h31 ;
parameter II=8'h32 ;
parameter III=8'h33 ;
parameter IV=8'h34 ;
parameter V5=8'h35 ;
parameter VI=8'h36 ;
parameter VII=8'h37 ;
parameter VIII=8'h38 ;
parameter VIIII=8'h39 ;

//definition of inputs/outputs
wire test;
wire Flag; // signal the uart has data
wire rs232_rx;
wire clk,rst_n;
wire bps_start;	// start receive
wire bps_start_t;	// start tranmit
wire clk_bps;	//  uart bps
wire clk_bps_t;	//  uart bps
wire[7:0] rx_data; // receive data to parser
wire rx_int;       // receive interrupt

wire rx_error;
wire tx_error;

wire rx_complete;
wire tx_complete;

 
wire pha_out;
wire phb_out;
wire home_out;
wire index_out; 
           
wire compara_error_uart7bit;
wire compare_ok;
wire rs232_tx7to7;
wire rs232_rx7to7; 
     
wire compara_error;
wire rs232_tx8to8;
wire rs232_rx8to8;  
    



////////////////////////////////////////////////////////////////////////////////////////////////
//debug led
reg led;
																			
// settings for log register
reg [`Buff_size-1:0] Buff_temp;
reg [`Buff_size-9:0] Rx_cmd;											
reg [2:0] Current, Next;		
reg Flag_temp;
//build in module enable
reg linkBIM;

reg linkKPP;
reg linkUSF;
reg linkPWT;
reg linkENC;
reg enable_enc;
reg linkEWM;
reg linkGLO;
reg linkUART;
reg linkPIT;
reg linkSPS;
reg linkFSM;
reg linkUSH;

reg enable_uart7bit;
reg[2:0] uart_speed_set_7bit;
reg tx_start_f_7bit;
    reg linkSPI;
reg linkUST;

reg[2:0] uart_speed_set;
reg tx_start_f;
    reg linkFSS;
reg linkFWM;
reg linkSPM;
reg linkPWM;
reg linkSHL;
reg linkCMP;


assign BusC[77] =  linkKPP ? BusC[75] : 1'bz;
assign BusA[17] =  linkUSF ? BusC[54] : 1'bz;
assign BusA[5] =  linkPWT ? BusA[15] : 1'bz;
assign BusA[5] =  linkENC ? index_out : 1'bz;
assign BusC[57] =  linkENC ? pha_out : 1'bz;
assign BusC[61] =  linkENC ? phb_out : 1'bz;
assign BusA[2] =  linkEWM ? BusA[16] : 1'bz;
assign BusA[8] =  linkGLO ? BusC[48] : 1'bz;
assign BusA[15] =  linkGLO ? BusC[48] : 1'bz;
assign BusA[8] =  linkPIT ? BusC[69] : 1'bz;
assign BusA[15] =  linkPIT ? BusC[69] : 1'bz;
assign BusC[91] =  linkSPS ? BusA[21] : 1'bz;
assign BusC[83] =  linkSPS ? BusA[20] : 1'bz;
assign BusC[87] =  linkSPS ? BusA[19] : 1'bz;
assign BusA[18] =  linkSPS ? BusC[85] : 1'bz;
assign BusC[91] =  linkFSM ? BusC[55] : 1'bz;
assign BusC[83] =  linkFSM ? BusC[48] : 1'bz;
assign BusC[87] =  linkFSM ? BusC[52] : 1'bz;
assign BusC[50] =  linkFSM ? BusC[85] : 1'bz;
assign BusA[17] =  linkUSH ? compara_error_uart7bit : 1'bz;
assign rs232_rx7to7 =  linkUSH ? BusC[57] : 1'bz;
assign BusC[61] =  linkUSH ? rs232_tx7to7 : 1'bz;
assign BusC[91] =  linkSPI ? BusC[55] : 1'bz;
assign BusC[83] =  linkSPI ? BusC[48] : 1'bz;
assign BusC[87] =  linkSPI ? BusC[52] : 1'bz;
assign BusC[50] =  linkSPI ? BusC[85] : 1'bz;
assign BusA[17] =  linkUST ? compara_error : 1'bz;
assign rs232_rx8to8 =  linkUST ? BusC[61] : 1'bz;
assign BusC[57] =  linkUST ? rs232_tx8to8 : 1'bz;
assign BusC[55] =  linkFSS ? BusC[91] : 1'bz;
assign BusC[48] =  linkFSS ? BusC[83] : 1'bz;
assign BusC[87] =  linkFSS ? BusC[52] : 1'bz;
assign BusC[50] =  linkFSS ? BusC[85] : 1'bz;
assign BusA[15] =  linkFWM ? BusB[40] : 1'bz;
assign BusA[8] =  linkFWM ? BusB[40] : 1'bz;
assign BusA[21] =  linkSPM ? BusC[91] : 1'bz;
assign BusA[20] =  linkSPM ? BusC[83] : 1'bz;
assign BusC[87] =  linkSPM ? BusA[18] : 1'bz;
assign BusA[19] =  linkSPM ? BusC[85] : 1'bz;
assign BusA[8] =  linkPWM ? BusC[75] : 1'bz;
assign BusA[15] =  linkPWM ? BusC[75] : 1'bz;
assign BusA[17] =  linkSHL ? BusC[64] : 1'bz;
assign BusC[73] =  linkCMP ? BusA[16] : 1'bz;


 
enc  enc( .rst_n(rst_n),
          .freq_clk(clk),
          .enable(enable_enc),
			    .pha(pha_out), 
			    .phb(phb_out), 
			    .home(home_out), 
			    .index(index_out)
        ); 
             
speed_select    speed_select( .clk(clk),  //baudrate selection
                      .rst_n(rst_n),
                      .rx_enable(bps_start),
                      .tx_enable(bps_start_t),
                      .buad_clk_rx(clk_bps),
                      .buad_clk_tx(clk_bps_t)
                      );

my_uart_rx      my_uart_rx(   .rst_n(rst_n), 
                      .baud_clk(clk_bps), 
                      .uart_rx(rs232_rx), 
                      .rx_data(rx_data),
                      .rx_enable(bps_start), 
                      .rx_complete(rx_complete), 
                      .rx_error(rx_error)
                      );
                      
my_uart_tx      my_uart_tx(   .rst_n(capture_rst), 
                      .baud_clk(clk_bps_t), 
                      .tx_start(tx_start), 
                      .tx_data(tx_data), 
                      .tx_enable(bps_start_t), 
                      .tx_complete(tx_complete), 
                      .uart_tx(rs232_tx), 
                      .error(tx_error)
                      );
     
uart_top7to7		uart_top7to7(
						.clk(clk),
						.rst_n(tx_start_f_7bit),
						.rs232_rx(rs232_rx7to7),
						.rs232_tx(rs232_tx7to7),
						.data_ok(compara_error_uart7bit),
						.uart_ctl(uart_speed_set_7bit)
						); 
     
uart_instance		uart_instance1(
						.clk(clk),
						.rst_n(tx_start_f),
						.rs232_rx(rs232_rx8to8),
						.rs232_tx(rs232_tx8to8),
						.data_ok(compara_error),
						.uart_ctl(uart_speed_set)
						); 
    

/////////////////////////////////////////////////////////////////////////////////////////////////////

reg flag_reg;
always @ (negedge bps_start or negedge rst_n)
begin
	if (!rst_n)
		flag_reg <= 1'b0;
	else if (!bps_start)
		flag_reg <= ~flag_reg;
end
assign Flag = flag_reg;

always @ (posedge clk or negedge rst_n)
begin
	if (!rst_n)
		Current <= IDLE;
	else
		Current <= Next;
end

// the state machine for receive data bytes
always @ (*)
begin
	Next = IDLE;
	case (Current)
		IDLE:
			if (rx_data == 8'h24) //$
				Next = S1;
			else
				Next = IDLE;
		S1:
			if (Flag_temp != Flag)
			begin
				if (rx_data != 8'h0d) //\n
					Next = S1;
				else
					Next = SAVE;
			end
			else
				Next = WAIT;
		WAIT:
			if (Flag_temp!=Flag)
			begin
				if (rx_data != 8'h0d)
					Next = S1;
				else
					Next = SAVE;
			end
			else
				Next = WAIT;
		default: Next = IDLE;
	endcase
end

always @ (posedge clk or negedge rst_n)
begin 
	if (!rst_n)
	begin
		Flag_temp <= 1'b0;
	end
	else
	begin
		Flag_temp <= Flag;
	end
end

always @ (posedge clk or negedge rst_n)
begin 
	if(!rst_n)
	begin
		Buff_temp <= `Buff_size'b0;
		Rx_cmd <= `Buff_size'b0;
	end
	else
	begin
		case (Current)	
			IDLE:  
			begin
				Buff_temp <= `Buff_size'b0;
			end
			S1:
			begin
				Buff_temp <= {{Buff_temp[`Buff_size - 9 : 0]}, rx_data};
			end 
			WAIT:
			begin
				Buff_temp <= Buff_temp;
			end 
			SAVE:
			begin
				Rx_cmd  <= Buff_temp[`Buff_size - 9 : 0];
				Buff_temp <= `Buff_size'b0;
			end
			default: 
			begin
			end
		endcase		
	end	
end

always @ (posedge clk or negedge rst_n)
begin
  if(!rst_n)
  begin
    //////////////////add link here////////////////
			linkKPP <= 1'b0;
			linkUSF <= 1'b0;
			linkPWT <= 1'b0;
			linkENC <= 1'b0;
			linkEWM <= 1'b0;
			linkGLO <= 1'b0;
			linkPIT <= 1'b0;
			linkSPS <= 1'b0;
			linkFSM <= 1'b0;
			linkUSH <= 1'b0;
			linkSPI <= 1'b0;
			linkUST <= 1'b0;
			linkFSS <= 1'b0;
			linkFWM <= 1'b0;
			linkSPM <= 1'b0;
			linkPWM <= 1'b0;
			linkSHL <= 1'b0;
			linkCMP <= 1'b0;

    ///////////////////////////////////////////////
    led <= 1'b0; // for debug led
    linkBIM <= 1'b1;
  end
  else
  begin
    case(Rx_cmd)
    ///////////////////add case here/////////////
      			
      {K,P, P}: //{C,M,D}
      begin
        linkKPP <= 1'b1;

        led <= 1'b1;
      end
      			
      {U,S, F}: //{C,M,D}
      begin
        linkUSF <= 1'b1;

        led <= 1'b1;
      end
      			
      {P,W, T}: //{C,M,D}
      begin
        linkPWT <= 1'b1;

        led <= 1'b1;
      end
      
      {E,N, C}: //{C,M,D}
      begin
        linkENC <= 1'b1;
			 enable_enc <= 1'b1;

        led <= 1'b1;
      end
      			
      {E,W, M}: //{C,M,D}
      begin
        linkEWM <= 1'b1;

        led <= 1'b1;
      end
      			
      {G,L, O}: //{C,M,D}
      begin
        linkGLO <= 1'b1;

        led <= 1'b1;
      end
      			
      {P,I, T}: //{C,M,D}
      begin
        linkPIT <= 1'b1;

        led <= 1'b1;
      end
      			
      {S,P, S}: //{C,M,D}
      begin
        linkSPS <= 1'b1;

        led <= 1'b1;
      end
      			
      {F,S, M}: //{C,M,D}
      begin
        linkFSM <= 1'b1;

        led <= 1'b1;
      end
      
      {U,S, H}: //{C,M,D}
      begin
        linkUSH <= 1'b1;
			 
          uart_speed_set_7bit <= 3'd4;
          tx_start_f_7bit <= 1'b1;
      

        led <= 1'b1;
      end
      			
      {S,P, I}: //{C,M,D}
      begin
        linkSPI <= 1'b1;

        led <= 1'b1;
      end
      
      {U,S, T}: //{C,M,D}
      begin
        linkUST <= 1'b1;
			 
          uart_speed_set <= 3'd4;
          tx_start_f <= 1'b1;
      

        led <= 1'b1;
      end
      			
      {F,S, S}: //{C,M,D}
      begin
        linkFSS <= 1'b1;

        led <= 1'b1;
      end
      			
      {F,W, M}: //{C,M,D}
      begin
        linkFWM <= 1'b1;

        led <= 1'b1;
      end
      			
      {S,P, M}: //{C,M,D}
      begin
        linkSPM <= 1'b1;

        led <= 1'b1;
      end
      			
      {P,W, M}: //{C,M,D}
      begin
        linkPWM <= 1'b1;

        led <= 1'b1;
      end
      			
      {S,H, L}: //{C,M,D}
      begin
        linkSHL <= 1'b1;

        led <= 1'b1;
      end
      			
      {C,M, P}: //{C,M,D}
      begin
        linkCMP <= 1'b1;

        led <= 1'b1;
      end
      
    /////////////////////////////////////////////

      {R,S,T}: //RESET
         begin
           			linkKPP <= 1'b0;
			linkUSF <= 1'b0;
			linkPWT <= 1'b0;
			enable_enc <= 1'b0;
			linkENC <= 1'b0;
			linkEWM <= 1'b0;
			linkGLO <= 1'b0;
			linkPIT <= 1'b0;
			linkSPS <= 1'b0;
			linkFSM <= 1'b0;
			
    enable_uart7bit <= 1'b0;
    uart_speed_set_7bit<=3'd4;
    tx_start_f_7bit <= 1'b0;
    
			linkUSH <= 1'b0;
			linkSPI <= 1'b0;
			
    uart_speed_set<=3'd4;
    tx_start_f <= 1'b0;
    
			linkUST <= 1'b0;
			linkFSS <= 1'b0;
			linkFWM <= 1'b0;
			linkSPM <= 1'b0;
			linkPWM <= 1'b0;
			linkSHL <= 1'b0;
			linkCMP <= 1'b0;

            led <= 1'b0;
            linkBIM <= 1'b1;
        end

         default:
         begin
          			linkKPP <= 1'b0;
			linkUSF <= 1'b0;
			linkPWT <= 1'b0;
			enable_enc <= 1'b0;
			linkENC <= 1'b0;
			linkEWM <= 1'b0;
			linkGLO <= 1'b0;
			linkPIT <= 1'b0;
			linkSPS <= 1'b0;
			linkFSM <= 1'b0;
			
    enable_uart7bit <= 1'b0;
    uart_speed_set_7bit<=3'd4;
    enable_uart7bit <= 1'b0;
    
			linkUSH <= 1'b0;
			linkSPI <= 1'b0;
			
    uart_speed_set<=3'd4;
    tx_start_f <= 1'b0;
    
			linkUST <= 1'b0;
			linkFSS <= 1'b0;
			linkFWM <= 1'b0;
			linkSPM <= 1'b0;
			linkPWM <= 1'b0;
			linkSHL <= 1'b0;
			linkCMP <= 1'b0;

          led <= 1'b0;
          linkBIM <= 1'b1;
      end
    endcase
  end
end


/////////////////////////////////////////////////////////////

endmodule
