`timescale 1ns/1ps
/***************************************************************************
Name:
Date: 7/18/2016
Founction: I2C top module
Note:
****************************************************************************/
module I2C_MASTER_reduced(clk,rst_n,sda,scl,RD_EN,WR_EN,receive_status
);

input clk;
input rst_n;
input RD_EN;
input WR_EN;
reg WR,RD;


output scl;
output receive_status;

inout sda;

wire scl;
reg receive_status;

reg[7:0] send_count;
wire[7:0] data;

reg[7:0] data_reg;

wire ack;

reg[7:0] send_memory;

wire sda_en;
wire sda_in;
wire sda_out;
    
assign  sda_in = (!sda_en) ? sda  : 1'bz;
assign	sda    = sda_en ? sda_out : 1'bz;


wire scl_fallingedge;
reg curr, last;
always@(posedge clk)
begin
	if(!rst_n) begin
		curr <= 1'b0;
		last <= 1'b0;
	end
	else begin
    curr <= scl;
    last <= curr;
	end
end

//failing edge
assign scl_fallingedge = ~curr & (last);

reg[4:0] scl_count;
always @(posedge clk or negedge rst_n)begin
	if(!rst_n)begin	
		WR         <= 1'b0;
		RD         <= 1'b0;
		data_reg   <= 'h0;
		send_memory <= 8'd0;
		send_count <= 'h0;
	end
	else 
		begin
			if(RD_EN)
				begin
					RD	<= 1'b1;
					WR <= 1'b0;
					if (scl_fallingedge)
						begin
							//skip the address
							if (scl_count == 'h9)
								begin
									scl_count <= 'h0;
									send_count <= send_count + 1'b1;
								end
							else
								scl_count <= scl_count + 1;
						end
				end
			else if(WR_EN)
				begin
					WR	<= 1'b1;
					RD <= 1'b0;
					if (scl_fallingedge)
						begin
							//skip the address
							if (scl_count == 'h8)
								begin
									send_memory <= send_memory + 1;
									send_count 	<= send_count + 1'b1;
									scl_count <= scl_count + 1;
								end
							else if (scl_count == 'h9)
									begin
										data_reg    <= send_memory;
										scl_count <= 'h0;
									end
							else
								scl_count <= scl_count + 1;
						end
				end
		end	
end

assign data = WR_EN ? data_reg :  8'hz;

I2C_wr_reduced I2C_wr_reduced_instance(
					.sda_in(sda_in),
					.sda_out(sda_out),
					.sda_en(sda_en),
					.scl(scl),
					.ack_status(ack),
					.reset_n(rst_n),
					.clock(clk),
					.WR(WR),
					.RD(RD),
					.data(data)
);

endmodule
